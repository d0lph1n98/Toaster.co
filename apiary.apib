FORMAT: 1A
HOST: http://www.google.com

# Toaster.io API
Toaster.io API is using the Arduino Yun **RESTful API** services to control the Yun's I/O system.

# Group Arduino Yun API
Yun's related resources of the **RESTful API**.

## Yun's Input [/arduino/{key}/{value}]
The returns JSON data is optional.

### Insert Value [GET]
+ Parameters
    + key (required, string, `port1`) ... String `port1` of the Arduino to indicate output port. Has example value.
    + value (required, string, `on`) ... String `on` of the `port1` to insert the value. Has example value.
    
+ Response 204

## Yun's Data Insertion [/data/put/{key}/{value}]
Assigning value to the key storage.
The returns JSON data is optional.

### Store a value inside the storage [PUT]
+ Parameters
    + key (required, string, `port1`) ... String `port1` of the Data to indicate the `key` names. Has example value.
    + value (required, string, `on`) ... String `on` of the `port1` to insert the value. Has example value.

+ Response 204

## Yun's Data Retrieve [/data/get/{key}]
Get a single key's value

### Retrieve the value of the requested key [GET]
+ Parameters
    + key (required, string, `port1`) ... String `port1` of the Data to retrieve the value. Has example value.
    
+ Response 200 (application/json)

    + Body

            { "key": port1, "value": "Pick-up posters from post-office" }

## Yun's Data Retrieve [/data/get]
Get the entire list of the storage

### Retrieve the entire storage list [GET]
+ Response 200 (application/json)
            
    + Body
    
            { "key": {1,2,3,4,5} }

## Yun's Data Deletion [/data/delete/{key}]
Deletes a single key's value.
The returns JSON data is optional.

### Delete single key's value [GET]
+ Parameters
    + key (required, string, `port1`) ... String `port1` of the Data to delete the value assigned. Has example value.

+ Response 204

## Yun's Data Deletion [/data/delete]
Deletes the internal storage
The returns JSON data is optional.

### Delete the entire storage [GET]
+ Response 204

## Yun's MailBox [/mailbox/{message}]
Add messages into a MailBox queue. 
The message will be stored inside the Linino system and can be read by the 32u4 MCU.
The returns JSON data is optional.

### Read the mailbox [GET]
+ Parameters
    + message (optional, string, `hello`) ... String `hello` is the message to be read by the 32u4 MCU. Has example value.

+ Response 200 (application/json)

    + Body
        
            { "message": "hello" }