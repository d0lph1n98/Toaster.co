FORMAT: 1A
HOST: http://www.google.com

# Toaster.io API
Toaster.io API is an enhanced Arduino Yun **RESTful API** service to control the Yun's I/O system.

# Group Arduino Yun API
Yun's related resources of the **RESTful API**.

## Yun's Input [/arduino/{key}/{value}]
The returns JSON data is optional.

### Send Value [GET]
+ Parameters
    + key (required, string, `led`) ... String `led` of the Arduino to indicate output port. Has example value.
    + value (required, string, `on`) ... String `on` of the `key` to perform action with. Has example value.
    
+ Response 204

## Yun's Data Insertion [/data/put/{key}/{value}]
Assigning value to the key storage.
The returns JSON data is optional.
### Store a value inside the storage [PUT]

+ Parameters
    + key (required, number, `1`) ... Numeric `key` of the Data to perform action with. Has example value.
    + value (required, number, `0-255`) ... Numeric `value` of the Data to perform action with. Has example value.

+ Response 204

## Yun's Data Retrieve [/data/get/{key}]
Get a single key's value

### Retrieve the value of the requested key [GET]

+ Parameters
    + key (required, number, `1`) ... Numeric `key` of the Data to perform action with. Has example value.
    
+ Response 200 (application/json)

    + Body

            { "key": 2, "value": "Pick-up posters from post-office" }

## Yun's Data Retrieve [/data/get]
Get the entire list of the storage

### Retrieve the entire storage list [GET]
+ Response 200 (application/json)
            
    + Body
    
            { "key": {1,2,3,4,5} }

## Yun's Data Deletion [/data/delete/{key}]
Deletes a single key's value.
The returns JSON data is optional.

### Delete single key's value [GET]
+ Parameters
    + key (required, number, `1`) ... Numeric `key` of the Data to perform action with. Has example value.

+ Response 204

## Yun's Data Deletion [/data/delete]
Deletes the internal storage
The reurns JSON data is optional.

### Delete the entire storage [GET]
+ Response 204

## Yun's MailBox [/mailbox/{message}]
Add messages into a MailBox queue. 
The message will be stored inside the Linino system and can be read by the 32u4 MCU.
The returns JSON data is optional.

### Read the mailbox [GET]
+ Parameters
    
    + message (optional, string, `hello`) ... String `hello` is the message to be read by the 32u4 MCU. Has example value.

+ Response 200 (application/json)

    + Body
        
            { "message": "hello" }